name: Orchestratex CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'docs/**'
      - 'config/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'docs/**'
      - 'config/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml

    - name: Run security scans
      run: |
        bandit -r src/
        safety check

    - name: Run linting
      run: |
        flake8 src/
        black --check src/
        isort --check src/

    - name: Run chaos testing
      run: |
        kubectl apply -f tests/chaos/chaos_scenarios.yaml
        sleep 3600  # Wait for chaos duration
        kubectl delete -f tests/chaos/chaos_scenarios.yaml

    - name: Build Docker image
      run: |
        docker build -t orchestratex:${{ github.sha }} .

    - name: Push to container registry
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker push orchestratex:${{ github.sha }}

    - name: Deploy to Kubernetes
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        kubectl apply -f k8s/

    - name: Run post-deployment tests
      if: github.ref == 'refs/heads/main'
      run: |
        python tests/post_deployment_tests.py

    - name: Notify Slack
      if: github.ref == 'refs/heads/main'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment successful!"}' $SLACK_WEBHOOK_URL
